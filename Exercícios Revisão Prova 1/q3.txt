#include<stdlib.h>
#include<stdio.h>

#define  MAX  7 // Tamanho

struct fila {
	int primeiro;
	int final;
	int nro_elementos;
	char elementos[MAX];
};

// Definir o tipo de dados Fila
typedef struct fila Fila;


Fila *criar()
{

	Fila *f;

	f = malloc(sizeof(Fila));
	if (f != NULL) {
		f->primeiro = 0;
		f->final = 0;
		f->nro_elementos = 0;
	}

	return f;
}


void destruir(Fila *f)
{
	if (f != NULL) free(f);
}


int vazia(Fila *f)
{
	if (f->nro_elementos == 0) return 1; // true
	else return 0; // false
}


int cheia(Fila *f)
{
	if (f->nro_elementos == MAX) return 1; // true
	else return 0; // false
}


int inserir(Fila *f, char x)
{
    //if (cheia(f))
	if (cheia(f) == 1)
		return 0;	// false
	else {
		f->nro_elementos = f->nro_elementos + 1;
		f->elementos[ f->final ] = x;

		// avanca o indice Final. Atencao: o vetor eh circular
		if (f->final == (MAX-1))
		    f->final = 0;
		else
		    f->final = f->final + 1;

		return 1;	// true
	}
}

int retirar(Fila *f, char *x)
{
	if (vazia(f) == 1)
		return 0;	// false
	else {
	    f->nro_elementos = f->nro_elementos - 1;
	    *x = f->elementos[ f->primeiro ];

	    if (f->primeiro == (MAX-1))
	        f->primeiro = 0;
	    else f->primeiro = f->primeiro + 1;

		return 1;	// true
	}
}

struct pilha {
    int topo;
    char *elementos;
};

// Definir o tipo de dados Pilha
typedef struct pilha Pilha;

// Função para criar uma nova pilha
Pilha *cria(int tam) {
    Pilha *p = malloc(sizeof(Pilha));
    if (p == NULL) {
        printf("Erro: nao foi possivel criar a pilha\n");
        exit(-1);
    }
    // Aloca espaço para o array de caracteres da pilha
    p->elementos = calloc(tam, sizeof(char));
    p->topo = -1;

    return p;
}

// Função para destruir uma pilha já criada
void destroi(Pilha *p) {
    free(p->elementos);
    free(p);
}

// Função para verificar se uma pilha está vazia
int vaziar(Pilha *p) {
    if (p->topo == -1)
        return 1; // true
    else
        return 0; // false
}

// Função para verificar se uma pilha está cheia
int cheiar(Pilha *p, int tam) {
    if (p->topo == (tam-1))
        return 1; // true
    else
        return 0; // false
}

// Função para empilhar um caractere na pilha
int empilha(Pilha *p, int tam, char x) {
    if (cheiar(p, tam) == 1)
        return 0; // false
    else {
        p->topo = p->topo + 1;
        p->elementos[p->topo] = x;
        return 1; // true
    }
}

// Função para desempilhar um caractere da pilha
int desempilha(Pilha *p, char *x) {
    if (vaziar(p) == 1)
        return 0; // false
    else {
        *x = p->elementos[p->topo];
        p->topo = p->topo - 1;
        return 1; // true
    }
}


int main()
{
	Fila *F;
	F = criar();
	Pilha *P = cria(MAX);
	char aux;

	inserir(F, '0');
	inserir(F, '1');
	inserir(F, '2');
	inserir(F, '3');
	inserir(F, '4');

	while(retirar(F, &aux) == 1){
        empilha(P,MAX, aux);
	}
	while(desempilha(P, &aux) == 1){
        inserir(F, aux);
	}

    while(retirar(F, &aux) == 1){
        printf("%c\n", aux);
	}


	return 0;
}
