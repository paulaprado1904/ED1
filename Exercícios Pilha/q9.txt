#include <stdio.h>
#include <stdlib.h>

#define MAX 200

// Definir a ED pilha
struct pilha {
	int topo;
	int elementos[MAX];
};

// Definir o tipo de dados Pilha
typedef struct pilha Pilha;

/*
  Entrada: nao existe
  Saida: ponteiro para Pilha, ou NULL caso nao seja possivel cria-la
  Pre-condicao: nao existe
  Pos-condicao: nao existe
*/
Pilha *criar()
{

	Pilha *p;

	p = malloc(sizeof(Pilha));
	if (p != NULL)
		p->topo = -1;

	return p;
}

/*
 * Entrada: uma pilha
 * Saida: nao existe
 * Pre-condicao: nao existe
 * Pos-condicao: memoria da pilha liberada
 */
void destruir(Pilha *p)
{
	if (p != NULL) free(p);
}

/*
 * Entrada: uma pilha
 * Saida: 1 se a pilha for vazia, 0 caso contrario
 * Pre-condicao: pilha deve ser valida
 * Pos-condicao: nao existe
 */
int vazia(Pilha *p)
{
	if (p->topo == -1) return 1; // true
	else return 0; // false
}

/*
 * Entrada: uma pilha
 * Saida: 1 se a pilha for cheia, 0 caso contrario
 * Pre-condicao: pilha deve ser valida
 * Pos-condicao: nao existe
 */
int cheia(Pilha *p)
{
	if (p->topo == (MAX-1))
		return 1; // true
	else return 0; // false
}

/*
 * Entrada: uma pilha e um caractere
 * Saida: 1 se bem sucedida, 0 caso contrario
 * Pre-condicao: pilha tem que ser valida e caractere tambem
 * Pos-condicao: conteudo da pilha alterado
 */
int empilhar(Pilha *p, char x)
{
	if (cheia(p) == 1)
		return 0;	// false
	else {
		p->topo = p->topo + 1;
		p->elementos[ p->topo ] = x;

		return 1;	// true
	}
}

/*
 * Entrada: uma pilha e um caractere passado por referencia
 * Saida: 1 se bem sucedida, 0 caso contrario
 * Pre-condicao: pilha tem que ser valida
 * Pos-condicao: conteudo da pilha alterado
 */
int desempilhar(Pilha *p, char *x)
{
	if (vazia(p) == 1)
		return 0;	// false
	else {
		*x = p->elementos[ p->topo ];
		p->topo = p->topo - 1;

		return 1;	// true
	}
}

void compare (Pilha *p1, Pilha *p2){

    int countp1, countp2;
    char c;
    while(desempilhar(p1, &c) == 1){
        countp1++;
    }
    while(desempilhar(p2, &c) == 1){
        countp2++;
    }

    if (countp1 > countp2)
        printf(" A pilha P1 tem mais elementos que P2");
    else if (countp1 == countp2)
        printf("As pilhas P1 e P2 tem a mesma quantidade de elementos");
    else
        printf("A pilha P2 tem mais elementos que P1");

}

int copiar(Pilha *p1, Pilha *p2){
    Pilha *aux;
    aux = criar();
    char c;
    while(desempilhar(p1, &c) == 1){
        empilhar(aux, c);
    }
    while(desempilhar(aux, &c) == 1){
        empilhar(p2, c);
    }
    return 1;
}

int main() {

    Pilha *binario, *octal, *hexa;
    binario = criar();
    octal = criar();
    hexa = criar();

    int decimal, restob, divb, restoo, divo, restoh, divh, b, o, h;
    printf("Insira o numero decimal: ");
    scanf("%d", &decimal);

    restob = decimal;
    divb = decimal;
    do{
        restob = divb % 2;
        divb = divb /2;
        empilhar(binario, restob);
    }
    while (divb >= 2);
    empilhar(binario, divb);


    restoo = decimal;
    divo = decimal;
    do{
        restoo = divo % 8;
        divo = divo /8;
        empilhar(octal, restoo);
    }
    while (divo >= 8);
    empilhar(octal, divo);

    restoh = decimal;
    divh = decimal;
    do{
        restoh = divh % 16;
        divh = divh /16;
        empilhar(hexa, restoh);
    }
    while (divh >= 16);
    empilhar(hexa, divh);

    printf("Conversao binaria:\n");
    while(desempilhar(binario, &b) == 1){
        printf("%d", b);
    }
   printf("\nConversao octal:\n");
   while(desempilhar(octal, &o) == 1){
       printf("%d", o);
   }
    printf("\nConversao hexadecimal:\n");
    while(desempilhar(hexa, &h) == 1){
        printf("%d", h);
    }

    return 0;
}


