#include <stdio.h>
#include <stdlib.h>

#define MAX 200

// Definir a ED pilha
struct pilha {
	int topo;
	char elementos[MAX];
};

// Definir o tipo de dados Pilha
typedef struct pilha Pilha;

/*
  Entrada: nao existe
  Saida: ponteiro para Pilha, ou NULL caso nao seja possivel cria-la
  Pre-condicao: nao existe
  Pos-condicao: nao existe
*/
Pilha *criar()
{

	Pilha *p;

	p = malloc(sizeof(Pilha));
	if (p != NULL)
		p->topo = -1;

	return p;
}

/*
 * Entrada: uma pilha
 * Saida: nao existe
 * Pre-condicao: nao existe
 * Pos-condicao: memoria da pilha liberada
 */
void destruir(Pilha *p)
{
	if (p != NULL) free(p);
}

/*
 * Entrada: uma pilha
 * Saida: 1 se a pilha for vazia, 0 caso contrario
 * Pre-condicao: pilha deve ser valida
 * Pos-condicao: nao existe
 */
int vazia(Pilha *p)
{
	if (p->topo == -1) return 1; // true
	else return 0; // false
}

/*
 * Entrada: uma pilha
 * Saida: 1 se a pilha for cheia, 0 caso contrario
 * Pre-condicao: pilha deve ser valida
 * Pos-condicao: nao existe
 */
int cheia(Pilha *p)
{
	if (p->topo == (MAX-1))
		return 1; // true
	else return 0; // false
}

/*
 * Entrada: uma pilha e um caractere
 * Saida: 1 se bem sucedida, 0 caso contrario
 * Pre-condicao: pilha tem que ser valida e caractere tambem
 * Pos-condicao: conteudo da pilha alterado
 */
int empilhar(Pilha *p, char x)
{
	if (cheia(p) == 1)
		return 0;	// false
	else {
		p->topo = p->topo + 1;
		p->elementos[ p->topo ] = x;

		return 1;	// true
	}
}

/*
 * Entrada: uma pilha e um caractere passado por referencia
 * Saida: 1 se bem sucedida, 0 caso contrario
 * Pre-condicao: pilha tem que ser valida
 * Pos-condicao: conteudo da pilha alterado
 */
int desempilhar(Pilha *p, char *x)
{
	if (vazia(p) == 1)
		return 0;	// false
	else {
		*x = p->elementos[ p->topo ];
		p->topo = p->topo - 1;

		return 1;	// true
	}
}

void compare (Pilha *p1, Pilha *p2){

    int countp1, countp2;
    char c;
    while(desempilhar(p1, &c) == 1){
        countp1++;
    }
    while(desempilhar(p2, &c) == 1){
        countp2++;
    }

    if (countp1 > countp2)
        printf(" A pilha P1 tem mais elementos que P2");
    else if (countp1 == countp2)
        printf("As pilhas P1 e P2 tem a mesma quantidade de elementos");
    else
        printf("A pilha P2 tem mais elementos que P1");

}

int main() {

    Pilha *P1, *P2;
    P1 = criar();
    P2 = criar();

    empilhar(P1, '1');
    empilhar(P1, '2');
    empilhar(P1, '3');
    empilhar(P1, '4');
    empilhar(P1, '5');
    empilhar(P1, '6');
    empilhar(P1, '6');

    empilhar(P2, '1');
    empilhar(P2, '2');
    empilhar(P2, '3');
    empilhar(P2, '4');
    empilhar(P2, '5');
    empilhar(P2, '6');
    empilhar(P2, '7');

    compare(P1, P2);

    destruir(P1);
    destruir(P2);

    return 0;
}


