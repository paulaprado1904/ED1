#include <stdio.h>
#include <stdlib.h>

#define MAX 200

// Definir a ED pilha
struct pilha {
    int topo;
    char elementos[MAX];
};

// Definir o tipo de dados Pilha
typedef struct pilha Pilha;

/*
  Entrada: nao existe
  Saida: ponteiro para Pilha, ou NULL caso nao seja possivel cria-la
  Pre-condicao: nao existe
  Pos-condicao: nao existe
*/
Pilha *criar()
{

    Pilha *p;

    p = malloc(sizeof(Pilha));
    if (p != NULL)
        p->topo = -1;

    return p;
}

/*
 * Entrada: uma pilha
 * Saida: nao existe
 * Pre-condicao: nao existe
 * Pos-condicao: memoria da pilha liberada
 */
void destruir(Pilha *p)
{
    if (p != NULL) free(p);
}

/*
 * Entrada: uma pilha
 * Saida: 1 se a pilha for vazia, 0 caso contrario
 * Pre-condicao: pilha deve ser valida
 * Pos-condicao: nao existe
 */
int vazia(Pilha *p)
{
    if (p->topo == -1) return 1; // true
    else return 0; // false
}

/*
 * Entrada: uma pilha
 * Saida: 1 se a pilha for cheia, 0 caso contrario
 * Pre-condicao: pilha deve ser valida
 * Pos-condicao: nao existe
 */
int cheia(Pilha *p)
{
    if (p->topo == (MAX-1))
        return 1; // true
    else return 0; // false
}

/*
 * Entrada: uma pilha e um caractere
 * Saida: 1 se bem sucedida, 0 caso contrario
 * Pre-condicao: pilha tem que ser valida e caractere tambem
 * Pos-condicao: conteudo da pilha alterado
 */
int empilhar(Pilha *p, char x)
{
    if (cheia(p) == 1)
        return 0;   // false
    else {
        p->topo = p->topo + 1;
        p->elementos[ p->topo ] = x;

        return 1;   // true
    }
}

/*
 * Entrada: uma pilha e um caractere passado por referencia
 * Saida: 1 se bem sucedida, 0 caso contrario
 * Pre-condicao: pilha tem que ser valida
 * Pos-condicao: conteudo da pilha alterado
 */
int desempilhar(Pilha *p, char *x)
{
    if (vazia(p) == 1)
        return 0;   // false
    else {
        *x = p->elementos[ p->topo ];
        p->topo = p->topo - 1;

        return 1;   // true
    }
}

int main() {
    char c, str[MAX];
    int tam;
    Pilha *P;

    printf("Digite sua string: ");
    scanf("%s", str);

    // Cria uma nova pilha com o tamanho fornecido pelo usu√°rio
    tam = strlen(str);
    P = criar();
    // Empilha a primeira metade da string na pilha
    for (int i = 0; i < tam; i++) {
        if(str[i] == '(')
        empilhar(P, str[i]);
        else if (str[i] == ')'){
            if (desempilhar(P, &c) == 0){
                printf("A expressao esta com parenteses na ordem INcorreta");
                exit(-1);
            }
        }
    }

    if (vazia(P) == 1){
        printf("A expressao esta com parenteses na ordem correta");
    }
    else
        printf("A expressao esta com parenteses na ordem INcorreta");

    destruir(P);
    return 0;
}

